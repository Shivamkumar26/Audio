#include <linux/module.h>
#include <linux/usb.h>
#include <sound/core.h>
#include <sound/pcm.h>
#include <sound/initval.h>

#define VENDOR_ID  0x0c76 
#define PRODUCT_ID 0x1203  

#define BUFFER_BYTES_MAX (128 * 1024)
#define PERIOD_BYTES_MIN 64

#define USB_AUDIO_URBNUM 4
#define USB_AUDIO_URB_SIZE 1024

struct usb_audio_dev {
    struct usb_device *udev;
    struct snd_pcm_substream *substream;
    unsigned char *audio_buffer;
    size_t buffer_size;
    struct urb *urbs[USB_AUDIO_URBNUM];
    unsigned int buffer_pos;
    atomic_t active;
    struct mutex mutex;
};

static struct snd_pcm_hardware usb_audio_pcm_hw = {
    .info = SNDRV_PCM_INFO_INTERLEAVED,
    .formats = SNDRV_PCM_FMTBIT_S16_LE,
    .rates = SNDRV_PCM_RATE_44100,
    .rate_min = 44100,
    .rate_max = 44100,
    .channels_min = 2,
    .channels_max = 2,
    .buffer_bytes_max = BUFFER_BYTES_MAX,
    .period_bytes_min = PERIOD_BYTES_MIN,
    .periods_min = 2,
    .periods_max = 1024,
};

static void usb_audio_urb_complete(struct urb *urb);

static int usb_audio_pcm_open(struct snd_pcm_substream *substream) {
    struct snd_pcm_runtime *runtime = substream->runtime;
    struct usb_audio_dev *audio_dev = snd_pcm_substream_chip(substream);

    runtime->hw = usb_audio_pcm_hw;
    audio_dev->substream = substream;

    audio_dev->buffer_size = BUFFER_BYTES_MAX;
    audio_dev->audio_buffer = kzalloc(audio_dev->buffer_size, GFP_KERNEL);
    if (!audio_dev->audio_buffer) {
        printk(KERN_ERR "Failed to allocate audio buffer\n");
        return -ENOMEM;
    }

    mutex_init(&audio_dev->mutex);
    atomic_set(&audio_dev->active, 0);
    audio_dev->buffer_pos = 0;

    printk(KERN_INFO "PCM open: buffer allocated\n");
    return 0;
}

static int usb_audio_pcm_close(struct snd_pcm_substream *substream) {
    struct usb_audio_dev *audio_dev = snd_pcm_substream_chip(substream);

    kfree(audio_dev->audio_buffer);
    audio_dev->audio_buffer = NULL;
    printk(KERN_INFO "PCM closed: buffer freed\n");

    return 0;
}

static int usb_audio_pcm_hw_params(struct snd_pcm_substream *substream, struct snd_pcm_hw_params *hw_params) {
    printk(KERN_INFO "PCM hw_params: configuring hardware\n");
    return snd_pcm_lib_malloc_pages(substream, params_buffer_bytes(hw_params));
}

static int usb_audio_pcm_hw_free(struct snd_pcm_substream *substream) {
    printk(KERN_INFO "PCM hw_free: freeing hardware resources\n");
    return snd_pcm_lib_free_pages(substream);
}

static int usb_audio_init_urbs(struct usb_audio_dev *audio_dev) {
    int i, ret;

    for (i = 0; i < USB_AUDIO_URBNUM; i++) {
        struct urb *urb = usb_alloc_urb(0, GFP_KERNEL);
        if (!urb) {
            ret = -ENOMEM;
            goto error;
        }

        audio_dev->urbs[i] = urb;

        usb_fill_bulk_urb(urb, audio_dev->udev,
                          usb_rcvbulkpipe(audio_dev->udev, 1),  // Endpoint 1 (adjust this if necessary)
                          audio_dev->audio_buffer + (i * USB_AUDIO_URB_SIZE),
                          USB_AUDIO_URB_SIZE,
                          usb_audio_urb_complete,
                          audio_dev);

        ret = usb_submit_urb(urb, GFP_KERNEL);
        if (ret) {
            usb_free_urb(urb);
            goto error;
        }
    }

    return 0;

error:
    while (--i >= 0) {
        if (audio_dev->urbs[i]) {
            usb_kill_urb(audio_dev->urbs[i]);
            usb_free_urb(audio_dev->urbs[i]);
        }
    }
    return ret;
}

static void usb_audio_free_urbs(struct usb_audio_dev *audio_dev) {
    int i;
    for (i = 0; i < USB_AUDIO_URBNUM; i++) {
        if (audio_dev->urbs[i]) {
            usb_kill_urb(audio_dev->urbs[i]);
            usb_free_urb(audio_dev->urbs[i]);
            audio_dev->urbs[i] = NULL;
        }
    }
}

static void usb_audio_urb_complete(struct urb *urb) {
    struct usb_audio_dev *audio_dev = urb->context;
    
    if (urb->status == 0 && atomic_read(&audio_dev->active)) {
        audio_dev->buffer_pos = (audio_dev->buffer_pos + urb->actual_length) % audio_dev->buffer_size;
        snd_pcm_period_elapsed(audio_dev->substream);
        
        // Resubmit URB for next transfer
        if (usb_submit_urb(urb, GFP_ATOMIC) < 0) {
            atomic_set(&audio_dev->active, 0);
            printk(KERN_ERR "Failed to resubmit URB\n");
        }
    } else {
        atomic_set(&audio_dev->active, 0);
        printk(KERN_ERR "URB completion error: %d\n", urb->status);
    }
}

static int usb_audio_pcm_trigger(struct snd_pcm_substream *substream, int cmd) {
    struct usb_audio_dev *audio_dev = snd_pcm_substream_chip(substream);
    int ret = 0;

    mutex_lock(&audio_dev->mutex);

    switch (cmd) {
        case SNDRV_PCM_TRIGGER_START:
            if (atomic_read(&audio_dev->active) == 0) {
                audio_dev->buffer_pos = 0;
                atomic_set(&audio_dev->active, 1);
                ret = usb_audio_init_urbs(audio_dev);
                if (ret == 0) {
                    printk(KERN_INFO "Audio stream started\n");
                } else {
                    atomic_set(&audio_dev->active, 0);
                    printk(KERN_ERR "Failed to start audio stream\n");
                }
            }
            break;
        case SNDRV_PCM_TRIGGER_STOP:
            if (atomic_read(&audio_dev->active) == 1) {
                atomic_set(&audio_dev->active, 0);
                usb_audio_free_urbs(audio_dev);
                printk(KERN_INFO "Audio stream stopped\n");
            }
            break;
        default:
            ret = -EINVAL;
    }

    mutex_unlock(&audio_dev->mutex);
    return ret;
}

static snd_pcm_uframes_t usb_audio_pcm_pointer(struct snd_pcm_substream *substream) {
    struct usb_audio_dev *audio_dev = snd_pcm_substream_chip(substream);
    return bytes_to_frames(substream->runtime, audio_dev->buffer_pos);
}

static struct snd_pcm_ops usb_audio_pcm_ops = {
    .open      = usb_audio_pcm_open,
    .close     = usb_audio_pcm_close,
    .hw_params = usb_audio_pcm_hw_params,
    .hw_free   = usb_audio_pcm_hw_free,
    .trigger   = usb_audio_pcm_trigger,
    .pointer   = usb_audio_pcm_pointer,
};

static int register_usb_audio_card(struct usb_device *dev) {
    struct snd_card *card;
    struct snd_pcm *pcm;
    struct usb_audio_dev *audio_dev;
    int ret;

    ret = snd_card_new(&dev->dev, -1, NULL, THIS_MODULE, sizeof(struct usb_audio_dev), &card);
    if (ret < 0) {
        printk(KERN_ERR "Failed to allocate sound card\n");
        return ret;
    }

    ret = snd_pcm_new(card, "USB Audio PCM", 0, 1, 1, &pcm);
    if (ret < 0) {
        snd_card_free(card);
        return ret;
    }

    audio_dev = card->private_data;
    audio_dev->udev = dev;
    pcm->private_data = audio_dev;

    snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_PLAYBACK, &usb_audio_pcm_ops);
    snd_pcm_set_ops(pcm, SNDRV_PCM_STREAM_CAPTURE, &usb_audio_pcm_ops);

    snd_pcm_lib_preallocate_pages_for_all(pcm, SNDRV_DMA_TYPE_CONTINUOUS, snd_dma_continuous_data(GFP_KERNEL), BUFFER_BYTES_MAX, BUFFER_BYTES_MAX);

    strcpy(card->driver, "USB Audio");
    strcpy(card->shortname, "USB Audio Device");
    strcpy(card->longname, "USB Audio Device via Waveshare Adapter");
    
    ret = snd_card_register(card);
    if (ret < 0) {
        snd_card_free(card);
        return ret;
    }

    printk(KERN_INFO "USB Audio card registered\n");
    return 0;
}

static struct usb_device_id usb_audio_id_table[] = {
    { USB_DEVICE(VENDOR_ID, PRODUCT_ID) },
    {}
};

MODULE_DEVICE_TABLE(usb, usb_audio_id_table);

static struct usb_driver usb_audio_driver;

static int usb_audio_probe(struct usb_interface *interface, const struct usb_device_id *id) {
    struct usb_device *udev = interface_to_usbdev(interface);
    return register_usb_audio_card(udev);
}

static void usb_audio_disconnect(struct usb_interface *interface) {
    struct usb_audio_dev *audio_dev = usb_get_intfdata(interface);
    if (audio_dev) {
        usb_audio_free_urbs(audio_dev);
        snd_card_free(audio_dev->card);
    }
}

static int __init usb_audio_init(void) {
    return usb_register(&usb_audio_driver);
}

static void __exit usb_audio_exit(void) {
    usb_deregister(&usb_audio_driver);
}

static struct usb_driver usb_audio_driver = {
    .name = "usb_audio",
    .probe = usb_audio_probe,
    .disconnect = usb_audio_disconnect,
    .id_table = usb_audio_id_table,
};

module_init(usb_audio_init);
module_exit(usb_audio_exit);

MODULE_LICENSE("GPL");
MODULE_DESCRIPTION("USB Audio Driver");
MODULE_AUTHOR("Shivam");
